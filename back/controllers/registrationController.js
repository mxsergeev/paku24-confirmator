const registrationRouter = require('express').Router()

const crypto = require('crypto')
const bcrypt = require('bcrypt')
const passwordGenerator = require('generate-password')
const {
  uniqueNamesGenerator,
  colors,
  animals,
} = require('unique-names-generator')

const User = require('../models/user')
const sendMail = require('../utils/email/awsSES')
const { DOMAIN_NAME } = require('../utils/config')

registrationRouter.post('/request-access', async (req, res) => {
  const { name, email, purpose } = req.body

  const requestToken = crypto
    .createHash('sha256')
    .update(Date.now().toString() + name)
    .digest('base64')

  const user = new User({
    name,
    email,
    requestToken,
    access: false,
  })

  await user.save()

  const url = `${DOMAIN_NAME}/api/registration/grant-access/?token=${encodeURIComponent(
    requestToken
  )}`

  const text = `<!DOCTYPE html>
  <html>
  <body>
  <h3>New request for access.</h3>
  <p>
  <h4>This person requested permission to use Paku24-Confirmator.</h4>
  Details: <br>
  
  Name: ${name} <br>
  Email: ${email} <br>
  Purpose: ${purpose} <br> <br>
  
  To grant access click the link below: <a href='${url}'>${url}</a></p>
  </body>
  </html>`

  sendMail(
    'themaximsergeev@gmail.com',
    'Request for access',
    text,
    'maxim81388@gmail.com'
  )
  return res.status(200).send({
    message: 'Your request has been successfully sent.',
    token: requestToken,
    url,
  })
})

registrationRouter.get('/grant-access', async (req, res) => {
  const requestToken = decodeURIComponent(req.query.token)

  const matchedUser = await User.findOne({ requestToken }).exec()

  if (matchedUser) {
    const generatedPassword = passwordGenerator.generate({
      length: 10,
      numbers: true,
    })
    const saltRounds = 10
    const passwordHash = await bcrypt.hash(generatedPassword, saltRounds)
    const randomUsername = uniqueNamesGenerator({
      dictionaries: [colors, animals],
    })

    await matchedUser
      .updateOne({
        username: randomUsername,
        passwordHash,
        access: true,
        $unset: { requestToken: '' },
      })
      .exec()

    const text = `<!DOCTYPE html>
    <html>
    <body>
    <h3>Request for access approved.</h3>
    <p>
    <h4>You can now login to paku24-confirmator using your autogenerated credentials:</h4>
    
    Username: ${randomUsername} <br>
    Password: ${generatedPassword} <br> <br>
    
    <a href='${DOMAIN_NAME}/login'>Login</a></p>
    </body>
    </html>`

    sendMail(
      matchedUser.email,
      'Request for access approved',
      text,
      'maxim81388@gmail.com'
    )

    return res.status(200).send({ message: 'Access granted successfully.' })
  }

  return res.status(404).send({ message: 'Token is not valid.' })
})

module.exports = registrationRouter
