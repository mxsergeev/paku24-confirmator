const registrationRouter = require('express').Router()

const crypto = require('crypto')
const bcrypt = require('bcrypt')
const passwordGenerator = require('generate-password')
const {
  uniqueNamesGenerator,
  colors,
  animals,
} = require('unique-names-generator')

const User = require('../../models/user')
const sendMail = require('../../utils/email/awsSES')
const { DOMAIN_NAME } = require('../../utils/config')
const newErrorWithCustomName = require('../../utils/helpers/newErrorWithCustomName')

registrationRouter.post('/request-access', async (req, res, next) => {
  const { name, email, purpose } = req.body

  try {
    const userInDB = await User.findOne({ email }).exec()

    if (userInDB) {
      const error = newErrorWithCustomName('AccessAlreadyRequestedError')
      return next(error)
    }

    const requestToken = crypto
      .createHash('sha256')
      .update(Date.now().toString() + name)
      .digest('base64')

    const user = new User({
      name,
      email,
      requestToken,
      access: false,
    })

    await user.save()

    const url = `${DOMAIN_NAME}/api/registration/grant-access/?token=${encodeURIComponent(
      requestToken
    )}`

    const text = `<!DOCTYPE html>
  <html>
  <body>
  <h3>New request for access.</h3>
  <p>
  <h4>This person requested permissions to use Paku24-Confirmator.</h4>
  Details: <br>
  
  Name: ${name} <br>
  Email: ${email} <br>
  Purpose: ${purpose} <br> <br>
  
  To grant access click the link below: <a href='${url}'>${url}</a></p>
  </body>
  </html>`

    sendMail({
      email: 'themaximsergeev@gmail.com',
      subject: 'Request for access',
      body: text,
      confirmation: false,
      sourceEmail: 'paku24.confirmator@gmail.com',
    })
    return res.status(200).send({
      message:
        'Your request has been successfully sent! You will receive email with your credentials when your request has been approved.',
      token: requestToken,
      url,
    })
  } catch (err) {
    return next(err)
  }
})

registrationRouter.get('/grant-access', async (req, res, next) => {
  try {
    const requestToken = decodeURIComponent(req.query.token)

    const matchedUser = await User.findOne({ requestToken }).exec()

    if (matchedUser) {
      const generatedPassword = passwordGenerator.generate({
        length: 8,
        numbers: true,
      })
      const saltRounds = 10
      const passwordHash = await bcrypt.hash(generatedPassword, saltRounds)
      const randomUsername = uniqueNamesGenerator({
        dictionaries: [colors, animals],
      })

      await matchedUser
        .updateOne({
          username: randomUsername,
          passwordHash,
          access: true,
          $unset: { requestToken: '' },
        })
        .exec()

      const text = `<!DOCTYPE html>
      <html>
      <body>
      <h3>Request for access approved.</h3>
      <p>
      <h4>You can now login to paku24-confirmator using your autogenerated credentials:</h4>
      
      Username: ${randomUsername} <br>
      Password: ${generatedPassword} <br> <br>
      
      <a href='${DOMAIN_NAME}/login'>Login</a></p>
      </body>
      </html>`

      sendMail({
        email: matchedUser.email,
        subject: 'Request for access approved',
        body: text,
        confirmation: false,
        sourceEmail: 'paku24.confirmator@gmail.com',
      })

      return res.status(200).send({ message: 'Access granted successfully.' })
    }

    const error = newErrorWithCustomName('RequestTokenError')
    return next(error)
  } catch (err) {
    return next(err)
  }
})

module.exports = registrationRouter
